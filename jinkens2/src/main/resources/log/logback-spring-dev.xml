<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<!--此文件的文件名：spring推荐为logback-spring-xxx.xml-->
<configuration  scan="true" scanPeriod="10 seconds">
    <!--logger上下文名称，默认为default。可以使用%contextName来打印上下文名称。可有可无-->
    <contextName>${logger.contextName}</contextName>
    <!-- 定义全局变量，定义的值会被插入到logger上下文中可以通过${}”来使用变量。 -->
    <!--日志根路径 rootPath-->
    <property name="log.path" value="logs"/>
    <!--统一日志格式-->
    <property name="unifyFormat" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %file{10}.%line : %msg %n"/>
    <!--控制台日志颜色渲染-->
    <property name="unifyColorFormat" value="%black(%d{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %boldGreen([%thread])  %boldCyan(%file{10}.%line) : %boldMagenta(%msg) %n"/>
    <!--统一字符集-->
    <property name="unifyCharSet" value="UTF-8"/>
    <!--日志归档大小-->
    <property name="unifyMerger" value="100MB"/>
    <!--日志保留时间：单位天-->
    <property name="unifyMaxDate" value="7"/>
    <!--日志输出位置,及其归档位置-->
    <property name="DEBUG_FILE" value="${log.path}/debug.log"/>
    <property name="DEBUG_PATH" value="${log.path}/debug/debug-%d{yyyy-MM-dd}.%i.log"/>
    <property name="INFO_FILE" value="${log.path}/info.log"/>
    <property name="INFO_PATH" value="${log.path}/info/info-%d{yyyy-MM-dd}.%i.log"/>
    <property name="WARN_FILE" value="${log.path}/warn.log"/>
    <property name="WARN_PATH" value="${log.path}/warn/warn-%d{yyyy-MM-dd}.%i.log"/>
    <property name="ERROR_FILE" value="${log.path}/error.log"/>
    <property name="ERROR_PATH" value="${log.path}/error/error-%d{yyyy-MM-dd}.%i.log"/>

    <!--控制台日志-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--过滤掉低于DEBUG级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <!--彩色日志-->
            <pattern>${unifyColorFormat}</pattern>
            <charset>${unifyCharSet}</charset>
        </encoder>
    </appender>


    <!--DEBUG级别文件输出源：每天滚动一次或者文件大小大于100M时滚动一次-->
    <appender name="debug_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志位置-->
        <file>${DEBUG_FILE}</file>
        <!--过滤掉低于DEBUG级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <pattern>${unifyFormat}</pattern>
            <charset>${unifyCharSet}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志归档-->
            <fileNamePattern>${DEBUG_PATH}</fileNamePattern>
            <!--文件最大大小-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${unifyMerger}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留天数-->
            <maxHistory>${unifyMaxDate}</maxHistory>
        </rollingPolicy>
    </appender>


    <!--INFO级别文件输出源：每天滚动一次或者文件大小大于100M时滚动一次-->
    <appender name="info_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志位置-->
        <file>${INFO_FILE}</file>
        <!--过滤掉低于INFO级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <pattern>${unifyFormat}</pattern>
            <charset>${unifyCharSet}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志归档-->
            <fileNamePattern>${INFO_PATH}</fileNamePattern>
            <!--文件最大大小-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${unifyMerger}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留天数-->
            <maxHistory>${unifyMaxDate}</maxHistory>
        </rollingPolicy>
    </appender>


    <!--WARN级别文件输出源：每天滚动一次或者文件大小大于100M时滚动一次-->
    <appender name="warn_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志位置-->
        <file>${WARN_FILE}</file>
        <!--过滤掉低于INFO级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <pattern>${unifyFormat}</pattern>
            <charset>${unifyCharSet}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志归档-->
            <fileNamePattern>${WARN_PATH}</fileNamePattern>
            <!--文件最大大小-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${unifyMerger}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留天数-->
            <maxHistory>${unifyMaxDate}</maxHistory>
        </rollingPolicy>
    </appender>

    <!--ERROR级别文件输出源：每天滚动一次或者文件大小大于100M时滚动一次-->
    <appender name="error_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志位置-->
        <file>${ERROR_FILE}</file>
        <!--过滤掉低于INFO级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <pattern>${unifyFormat}</pattern>
            <charset>${unifyCharSet}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志归档-->
            <fileNamePattern>${ERROR_PATH}</fileNamePattern>
            <!--文件最大大小-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${unifyMerger}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留天数-->
            <maxHistory>${unifyMaxDate}</maxHistory>
        </rollingPolicy>
    </appender>



    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
    -->
    <!--<logger name="org.springframework.web" level="info"/>-->
    <!--<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>-->
    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->


    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->
    <!--<logger name="com.study.jinkens.controller" level="debug"/>-->
    <!--配置日志输出级别，及输出源。必选项，且必须配置在appender下面-->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="debug_file"/>
        <appender-ref ref="info_file"/>
        <appender-ref ref="warn_file"/>
        <appender-ref ref="error_file"/>
    </root>

</configuration>